<!DOCTYPE html>
<html>
<head>
<script src="main.js" defer></script> #открываем скрипт более правильный вариант
<meta charset="utf-8">
</head>

<body>
<p>Это обычный HTML документ</p>
<script language="JavaScript"> #открываем скрипт
 alert ("Привет, мир!");  #alert - команда котороя вводит на старанице всплывающее окно с проп.текстом
</script>

<p>Выходим обратно в HTML</p>
</body>
</html>

let a - переменную в дальнейшем можем изменять
cost a - переменную в дальнейшем можем НЕ изменить


               ПРИМЕТИВНЫЕ ТИПЫ ДАННЫХ
 В JavaScript имеются следующие примитивные типы данных: number, boolean, string, undefined, null.

Переменная в JavaScript может содержать любые данные. Там может быть строка вначале, а далее, например – число:
// Это не ошибка
let message = "string"; #строка это ковычки
message = 1234; #числа без всего

              - Числа
 ● Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого
числа.
Мы можем получить его в результате деления на ноль:
	alert( 5 / 0 ); // Infinity
Или задать его явно:
	alert( Infinity ); // Infinity
 ● NaN (Not a Number) означает вычислительную ошибку. Это результат неправильной или неопределённой
математической операции, например:
	alert( "не число" / 4 ); // NaN, такое деление является ошибкой
Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN:
	alert( "не число" / 4 + 5 ); // NaN

             - Строка
Строка (string) в JavaScript заключается в кавычки.
let str = "Это строка";

"" и '' - одно и тоже
`` - Они позволяют нам встраивать выражения в строку, заключая их в ${…}:
// Вставим переменную
alert( `Привет, ${name}!` ); // Привет, Алевтина!
// Вставим выражение
alert( `результат: ${2 + 2}` ); // результат: 4

!!!Все данные, которые мы вводим с клавиатуры по умолчанию для JS принадлежат строковому типу


           -  Булевый (логический) тип
Булевый тип (boolean) принимает только два значения: истина (true) и ложь (false).
Например:
let name = true; // да, поле отмечено
let age = false; // нет, поле не отмечено
Булевые значения также могут быть результатом сравнений:
let compare = 5 > 2;
alert( compare ); // true (результатом сравнения будет "да")

           - Значение «null»
Оно формирует отдельный тип, который содержит только значение null:
let age = null;
В JavaScript null – это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».

          - Значение «undefined»
Оно означает, что «значение не было присвоено».
Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:
let age;
alert(age); // выведет "undefined"
Технически мы можем присвоить значение undefined любой переменной:
let age = 123;
// изменяем значение на undefined
age = undefined;
alert(age); // "undefined"
…Но так делать не рекомендуется. Обычно null используется для присвоения переменной «пустого» или «неизвестного» значения,
 а undefined – для проверок, была ли переменная назначена

        -  Оператор typeof
Оператор typeof возвращает тип аргумента. Удобно его применять, когда нам необходимо сделать проверку.
У него есть две синтаксические формы: typeof x, typeof(x). Работает со скобками или без скобок. Результат один и тот же.
Вызов typeof x возвращает строку с именем типа:
typeof undefined // "undefined"
typeof 0 // "number"
typeof true // "boolean"
typeof "oo" // "string"



          ОКНА Взаимодействие: alert, prompt, confirm
 - alert
Она показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК».
Например:
alert("Привет");

 - prompt
let test = prompt("Test");
Этот код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK (Проложить)/Отмена.
Синтаксис:
result = prompt(title, [default]);
title - текст для отображения в окне.
default - необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.
Пользователь напечатает что-либо в поле ввода и нажмет «Продолжить».

<script language="JavaScript">
 let neim = prompt("Ввидите имя");
 alert ("neim"); всплывающее окно с переменной Имя
</script>


 - confirm
Синтаксис:
result = confirm(question);
Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: Да и Нет.
Результат – true, если нажата кнопка Да. В других случаях – false.
Например:
let right = confirm("Ты всегда прав?");
alert( right ); // true, если нажата OK


         АРИФМЕТИКА в JS
Поддерживаются следующие математические операторы:
 ● Сложение +,
 ● Вычитание -,
 ● Умножение *,
 ● Деление /,
 ● Взятие остатка от деления %,
 ● Возведение в степень **.
     Математически, оператор работает и для нецелых чисел. Например, квадратный корень является возведением в степень 1/2:
      alert( 25 ** (1/2) ); // 5 (степень 1/2 эквивалентна взятию квадратного корня)

!!!При вводе данных это всегда строка, для изменения нам необходимо использовать функцию parseInt(), которая переводит строковый тип данных в числовой:
let number = Number.parseInt(prompt(“Введите число”)); выводит целое число
let number = Number.parseFloat(prompt(“Введите число”)); выводит дробное число

    - Сложение строк при помощи бинарного +
Мы можем совмещать строки с помощью оператора "+"
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"
!с другими операторами это не работает

   - Приведение к числу, унарный +
Унарный - это применённый к одному значению. Если операнд не число, унарный плюс преобразует его вчисло.
аналог уже знакомой функции parseInt(), работающий для всех типов данных, а не только для строк.
Например:
// Не влияет на числа НЕ ПЕРЕВЕДЕТ В ЧИСЛО
let x = 1;
alert( +x ); // 1
// Преобразует не числа в числа ПЕРЕВЕДЕТ В ЧИСЛО
alert( +true ); // 1
alert( +"" ); // 0


            УСЛОВИЯ ветвление: if, '?'

 - Инструкция «if»
let year = prompt('Какой сейчас год?', '');
if (year == 2022) alert( 'Вы правы!' );
или
if (year == 2022) {
 alert( "Правильно!" );
 alert( "Вы такой умный!" );
}
*лучше использовать {}
Инструкция if может содержать необязательный блок «else» («иначе»).
let year = prompt('Какой сейчас год?', '');
if (year == 2022) {
 alert( 'Да вы знаток!' );
} else {
 alert( 'А вот и неправильно!' ); // любое значение, кроме 2022
}

 - Условный оператор „?“
Оператор ? аналогичен if. Его также называют «тернарный», так как этот оператор, единственный в своём роде, имеет три аргумента.
Синтаксис:
let result = условие ? значение1 : значение2;
Сначала вычисляется условие: если оно истинно, тогда возвращается значение1, в противном случае – значение2.
Например:
let accessAllowed = (age > 20) ? true : false;
  наз. переменной = (условие) if значениеили действее если условие выполнено :(делитель) значениеили действее если условие НЕ выполнено (не обязательно);
Технически, мы можем опустить круглые скобки вокруг age > 20. Оператор вопросительного знака имеет
низкий приоритет, поэтому он выполняется после сравнения >.


          ЛОГИСТИЧЕСКИЕ операторы
В JavaScript есть три логических оператора: || (ИЛИ, «+»), && (И, «х») и ! (НЕ, «_»).

 - Логическое И (&&)
Примеры:
<script>
 alert( true && true ); // true
 alert( false && true ); // false
 alert( true && false ); // false
блок кода1 блок кода2
 alert( false && false ); // false
</script>
Часто оператор И && используется совместно с двумя выражениями сравнения:
<script>
 var x = 0, y = 0;
 alert( х == 0 && у == 0 ); // true (true && true)
</script>
Операторы сравнения имеют более высокий приоритет, чем логические операторы && и ||.
Для оператора && не обязательно, чтобы его операнды были булевыми значениями. Он принимает любые значения, поскольку они могут быть преобразованы в булевы.

 - Логическое || (ИЛИ)
Оператор «ИЛИ» выглядит как двойной символ вертикальной черты и называется логическим сложением:
result = a || b;
Существует четыре возможные логические комбинации:
alert( true || true ); // true
alert( false || true ); // true
alert( true || false ); // true
alert( false || false ); // false
Как видно, результат операций всегда равен true, за исключением случая, когда оба аргумента false.
Если значение не логического типа, то оно к нему приводится в целях вычислений.
Например, число 1 будет воспринято как true, а 0 – как false:
if (1 || 0) { // работает как if( true || false )
 alert( 'Истина!' );
}
Обычно оператор || используется в if для проверки истинности любого из заданных условий.
К примеру:
let hour = 8;
if (hour < 10 || hour > 18) {
 alert( 'Офис закрыт.' );
}

 - Логическое НЕ (!)
Оператор логического НЕ ! является унарным оператором, помещаемым перед одиночным операндом.
Он преобразует значение своего операнда в булево значение, затем инвертирует это значение в
противоположное и возвращает, полученное в результате инвертирования, булево значение.
Вот некоторые примеры:
<script>
 alert ( !false ); // true
 alert ( !"строка" ); // false
 alert ( !0 ); // true
 alert ( !NaN); // true
 alert ( !"" ); // true
 alert ( !777 ); // false
 alert ( !null ); // true
</script>
Оператор ! всегда возвращает true или false, поэтому его можно использовать для преобразования любого
значения x в его логический эквивалент, дважды применив этот оператор: !!x.
<script>
 alert ( !!"строка" ); // true
 alert ( !!0 ); // false
 alert ( !!NaN); // false
 alert ( !!"" ); // false
 alert ( !!777 ); // true
 alert ( !!null ); // false
</script>


                    Операторы присваивания
Присваивание              x = y  x = y
Присваивание со сложением x += y x = x + y
Присваивание с вычитанием x -= y x = x - y
Присваивание с умножением x *= y x = x * y
Присваивание с делением   x /= y x = x / y
Присваивание по модулю    x %= y x = x % y


                   ЦИКЛЫ

 - Цикл «while»
принцип как в C# Пример:
let i = 0;
while (i < 5) { // выводит 0, затем 1, затем 2, 3, 4
 alert( i );
 i++;

 - Цикл «do…while»
Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:
do {
 // тело цикла
} while (condition);
Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова.
Например:
let i = 0;
do {
 alert( i );
 i++;
} while (i < 5);
Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз, даже если условие окажется ложным.
 На практике чаще используется форма с предусловием: while(…) {…}.

 - Цикл «for»
принцип как в C# Пример:
Цикл ниже выполняет alert(i) для i от 0 до (но не включая) 5:
for (let i = 0; i < 5; i++) { // выведет 0, затем 1, затем 2, 3, 4
 alert(i);
}

             КОНСТРУКЦИЯ "switch"
Конструкция switch заменяет собой сразу несколько if. Пример: 
let a = 2 + 4;
switch (a) {
 case 3:
 alert( 'Маловато' );
 break;
 case 6:
 alert( 'В точку!' );
 break;
 case 7:
 alert( 'Перебор' );
 break;
 default:
 alert( "Нет таких значений" );
}


           Объявление ФУНКЦИИ

*Вначале идёт ключевое слово function,
Например:
function showMessage() {
 alert( 'Всем привет!' );
}
showMessage(); #вызов

 - Локальные переменные
Это переменные, объявленные внутри функции, они видны только внутри этой функции, но не доступны в основном теле программы.
Например:
function showMessage() {
 let message = "Привет, это Василий!"; // локальная переменная
 alert( message );
}
showMessage(); // Привет, я Василий!
alert( message ); // <-- в этом случае будет ошибка, т.к. переменная видна только внутри функции

 - Внешние переменные
Функция имеет доступ к внешним переменным, например:
let а = 1;
let b = 2;
function showMessage(a,b) {
 return a+b;
}
showMessage(a,b); // Привет, Алевтина
Функция обладает полным доступом к внешним переменным и может изменять их значение.










